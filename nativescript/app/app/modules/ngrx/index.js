Object.defineProperty(exports, "__esModule", { value: true });
require("@ngrx/core/add/operator/select");
/**
 * The compose function is one of our most handy tools. In basic terms, you give
 * it any number of functions and it returns a function. This new function
 * takes a value and chains it through every composed function, returning
 * the output.
 *
 * More: https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch5.html
 */
var compose_1 = require("@ngrx/core/compose");
/**
 * storeFreeze prevents state from being mutated. When mutation occurs, an
 * exception will be thrown. This is useful during development mode to
 * ensure that none of the reducers accidentally mutates the state.
 */
var ngrx_store_freeze_1 = require("ngrx-store-freeze");
/**
 * combineReducers is another useful metareducer that takes a map of reducer
 * functions and creates a new reducer that stores the gathers the values
 * of each reducer and stores them using the reducer's key. Think of it
 * almost like a database, where every reducer is a table in the db.
 *
 * More: https://egghead.io/lessons/javascript-redux-implementing-combinereducers-from-scratch
 */
var store_1 = require("@ngrx/store");
/**
 * Every reducer module's default export is the reducer function itself. In
 * addition, each module should export a type or interface that describes
 * the state of the reducer plus any selector functions. The `* as`
 * notation packages up all of the exports into a single object.
 */
var fromMultilingual = require("../i18n/index");
var fromSample = require("../sample/index");
/**
 * Because metareducers take a reducer function and return a new reducer,
 * we can use our compose helper to chain them together. Here we are
 * using combineReducers to make our top level reducer, and then
 * wrapping that in storeLogger. Remember that compose applies
 * the result from right to left.
 */
var reducers = {
    i18n: fromMultilingual.reducer,
    sample: fromSample.reducer
};
// ensure state is frozen as extra level of security when developing
// helps maintain immutability
var developmentReducer = compose_1.compose(ngrx_store_freeze_1.storeFreeze, store_1.combineReducers)(reducers);
// for production, dev has already been cleared so no need
var productionReducer = store_1.combineReducers(reducers);
function AppReducer(state, action) {
    if (String('<%= BUILD_TYPE %>') === 'dev') {
        return developmentReducer(state, action);
    }
    else {
        return productionReducer(state, action);
    }
}
exports.AppReducer = AppReducer;
function getMultilingualState(state$) {
    return state$.select(function (s) { return s.i18n; });
}
exports.getMultilingualState = getMultilingualState;
function getNameListState(state$) {
    return state$.select(function (s) { return s.sample; });
}
exports.getNameListState = getNameListState;
exports.getLang = compose_1.compose(fromMultilingual.getLang, getMultilingualState);
exports.getNames = compose_1.compose(fromSample.getNames, getNameListState);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsMENBQXdDO0FBRXhDOzs7Ozs7O0dBT0c7QUFDSCw4Q0FBNkM7QUFFN0M7Ozs7R0FJRztBQUNILHVEQUFnRDtBQUVoRDs7Ozs7OztHQU9HO0FBQ0gscUNBQThDO0FBRTlDOzs7OztHQUtHO0FBQ0gsZ0RBQWtEO0FBQ2xELDRDQUE4QztBQVc5Qzs7Ozs7O0dBTUc7QUFDSCxJQUFNLFFBQVEsR0FBRztJQUNmLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPO0lBQzlCLE1BQU0sRUFBRSxVQUFVLENBQUMsT0FBTztDQUMzQixDQUFDO0FBRUYsb0VBQW9FO0FBQ3BFLDhCQUE4QjtBQUM5QixJQUFNLGtCQUFrQixHQUE2QixpQkFBTyxDQUFDLCtCQUFXLEVBQUUsdUJBQWUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3JHLDBEQUEwRDtBQUMxRCxJQUFNLGlCQUFpQixHQUE2Qix1QkFBZSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTlFLG9CQUEyQixLQUFVLEVBQUUsTUFBVztJQUNoRCxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0FBQ0gsQ0FBQztBQU5ELGdDQU1DO0FBRUQsOEJBQXFDLE1BQTZCO0lBQ2hFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQztBQUNwQyxDQUFDO0FBRkQsb0RBRUM7QUFDRCwwQkFBaUMsTUFBNkI7SUFDNUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsTUFBTSxFQUFSLENBQVEsQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFGRCw0Q0FFQztBQUVZLFFBQUEsT0FBTyxHQUFRLGlCQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDdkUsUUFBQSxRQUFRLEdBQVEsaUJBQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWJzXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG4vLyBpbXBvcnQgeyBjb21iaW5lTGF0ZXN0IH0gZnJvbSAncnhqcy9vYnNlcnZhYmxlL2NvbWJpbmVMYXRlc3QnO1xyXG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5pbXBvcnQgJ0BuZ3J4L2NvcmUvYWRkL29wZXJhdG9yL3NlbGVjdCc7XHJcblxyXG4vKipcclxuICogVGhlIGNvbXBvc2UgZnVuY3Rpb24gaXMgb25lIG9mIG91ciBtb3N0IGhhbmR5IHRvb2xzLiBJbiBiYXNpYyB0ZXJtcywgeW91IGdpdmVcclxuICogaXQgYW55IG51bWJlciBvZiBmdW5jdGlvbnMgYW5kIGl0IHJldHVybnMgYSBmdW5jdGlvbi4gVGhpcyBuZXcgZnVuY3Rpb25cclxuICogdGFrZXMgYSB2YWx1ZSBhbmQgY2hhaW5zIGl0IHRocm91Z2ggZXZlcnkgY29tcG9zZWQgZnVuY3Rpb24sIHJldHVybmluZ1xyXG4gKiB0aGUgb3V0cHV0LlxyXG4gKlxyXG4gKiBNb3JlOiBodHRwczovL2RyYm9vbGVhbi5naXRib29rcy5pby9tb3N0bHktYWRlcXVhdGUtZ3VpZGUvY29udGVudC9jaDUuaHRtbFxyXG4gKi9cclxuaW1wb3J0IHsgY29tcG9zZSB9IGZyb20gJ0BuZ3J4L2NvcmUvY29tcG9zZSc7XHJcblxyXG4vKipcclxuICogc3RvcmVGcmVlemUgcHJldmVudHMgc3RhdGUgZnJvbSBiZWluZyBtdXRhdGVkLiBXaGVuIG11dGF0aW9uIG9jY3VycywgYW5cclxuICogZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLiBUaGlzIGlzIHVzZWZ1bCBkdXJpbmcgZGV2ZWxvcG1lbnQgbW9kZSB0b1xyXG4gKiBlbnN1cmUgdGhhdCBub25lIG9mIHRoZSByZWR1Y2VycyBhY2NpZGVudGFsbHkgbXV0YXRlcyB0aGUgc3RhdGUuXHJcbiAqL1xyXG5pbXBvcnQgeyBzdG9yZUZyZWV6ZSB9IGZyb20gJ25ncngtc3RvcmUtZnJlZXplJztcclxuXHJcbi8qKlxyXG4gKiBjb21iaW5lUmVkdWNlcnMgaXMgYW5vdGhlciB1c2VmdWwgbWV0YXJlZHVjZXIgdGhhdCB0YWtlcyBhIG1hcCBvZiByZWR1Y2VyXHJcbiAqIGZ1bmN0aW9ucyBhbmQgY3JlYXRlcyBhIG5ldyByZWR1Y2VyIHRoYXQgc3RvcmVzIHRoZSBnYXRoZXJzIHRoZSB2YWx1ZXNcclxuICogb2YgZWFjaCByZWR1Y2VyIGFuZCBzdG9yZXMgdGhlbSB1c2luZyB0aGUgcmVkdWNlcidzIGtleS4gVGhpbmsgb2YgaXRcclxuICogYWxtb3N0IGxpa2UgYSBkYXRhYmFzZSwgd2hlcmUgZXZlcnkgcmVkdWNlciBpcyBhIHRhYmxlIGluIHRoZSBkYi5cclxuICpcclxuICogTW9yZTogaHR0cHM6Ly9lZ2doZWFkLmlvL2xlc3NvbnMvamF2YXNjcmlwdC1yZWR1eC1pbXBsZW1lbnRpbmctY29tYmluZXJlZHVjZXJzLWZyb20tc2NyYXRjaFxyXG4gKi9cclxuaW1wb3J0IHsgY29tYmluZVJlZHVjZXJzIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEV2ZXJ5IHJlZHVjZXIgbW9kdWxlJ3MgZGVmYXVsdCBleHBvcnQgaXMgdGhlIHJlZHVjZXIgZnVuY3Rpb24gaXRzZWxmLiBJblxyXG4gKiBhZGRpdGlvbiwgZWFjaCBtb2R1bGUgc2hvdWxkIGV4cG9ydCBhIHR5cGUgb3IgaW50ZXJmYWNlIHRoYXQgZGVzY3JpYmVzXHJcbiAqIHRoZSBzdGF0ZSBvZiB0aGUgcmVkdWNlciBwbHVzIGFueSBzZWxlY3RvciBmdW5jdGlvbnMuIFRoZSBgKiBhc2BcclxuICogbm90YXRpb24gcGFja2FnZXMgdXAgYWxsIG9mIHRoZSBleHBvcnRzIGludG8gYSBzaW5nbGUgb2JqZWN0LlxyXG4gKi9cclxuaW1wb3J0ICogYXMgZnJvbU11bHRpbGluZ3VhbCBmcm9tICcuLi9pMThuL2luZGV4JztcclxuaW1wb3J0ICogYXMgZnJvbVNhbXBsZSBmcm9tICcuLi9zYW1wbGUvaW5kZXgnO1xyXG5cclxuLyoqXHJcbiAqIEFzIG1lbnRpb25lZCwgd2UgdHJlYXQgZWFjaCByZWR1Y2VyIGxpa2UgYSB0YWJsZSBpbiBhIGRhdGFiYXNlLiBUaGlzIG1lYW5zXHJcbiAqIG91ciB0b3AgbGV2ZWwgc3RhdGUgaW50ZXJmYWNlIGlzIGp1c3QgYSBtYXAgb2Yga2V5cyB0byBpbm5lciBzdGF0ZSB0eXBlcy5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFwcFN0YXRlIHtcclxuICBpMThuOiBmcm9tTXVsdGlsaW5ndWFsLklNdWx0aWxpbmd1YWxTdGF0ZTtcclxuICBzYW1wbGU6IGZyb21TYW1wbGUuSVNhbXBsZVN0YXRlO1xyXG59XHJcblxyXG4vKipcclxuICogQmVjYXVzZSBtZXRhcmVkdWNlcnMgdGFrZSBhIHJlZHVjZXIgZnVuY3Rpb24gYW5kIHJldHVybiBhIG5ldyByZWR1Y2VyLFxyXG4gKiB3ZSBjYW4gdXNlIG91ciBjb21wb3NlIGhlbHBlciB0byBjaGFpbiB0aGVtIHRvZ2V0aGVyLiBIZXJlIHdlIGFyZVxyXG4gKiB1c2luZyBjb21iaW5lUmVkdWNlcnMgdG8gbWFrZSBvdXIgdG9wIGxldmVsIHJlZHVjZXIsIGFuZCB0aGVuXHJcbiAqIHdyYXBwaW5nIHRoYXQgaW4gc3RvcmVMb2dnZXIuIFJlbWVtYmVyIHRoYXQgY29tcG9zZSBhcHBsaWVzXHJcbiAqIHRoZSByZXN1bHQgZnJvbSByaWdodCB0byBsZWZ0LlxyXG4gKi9cclxuY29uc3QgcmVkdWNlcnMgPSB7XHJcbiAgaTE4bjogZnJvbU11bHRpbGluZ3VhbC5yZWR1Y2VyLFxyXG4gIHNhbXBsZTogZnJvbVNhbXBsZS5yZWR1Y2VyXHJcbn07XHJcblxyXG4vLyBlbnN1cmUgc3RhdGUgaXMgZnJvemVuIGFzIGV4dHJhIGxldmVsIG9mIHNlY3VyaXR5IHdoZW4gZGV2ZWxvcGluZ1xyXG4vLyBoZWxwcyBtYWludGFpbiBpbW11dGFiaWxpdHlcclxuY29uc3QgZGV2ZWxvcG1lbnRSZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPElBcHBTdGF0ZT4gPSBjb21wb3NlKHN0b3JlRnJlZXplLCBjb21iaW5lUmVkdWNlcnMpKHJlZHVjZXJzKTtcclxuLy8gZm9yIHByb2R1Y3Rpb24sIGRldiBoYXMgYWxyZWFkeSBiZWVuIGNsZWFyZWQgc28gbm8gbmVlZFxyXG5jb25zdCBwcm9kdWN0aW9uUmVkdWNlcjogQWN0aW9uUmVkdWNlcjxJQXBwU3RhdGU+ID0gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBBcHBSZWR1Y2VyKHN0YXRlOiBhbnksIGFjdGlvbjogYW55KSB7XHJcbiAgaWYgKFN0cmluZygnPCU9IEJVSUxEX1RZUEUgJT4nKSA9PT0gJ2RldicpIHtcclxuICAgIHJldHVybiBkZXZlbG9wbWVudFJlZHVjZXIoc3RhdGUsIGFjdGlvbik7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBwcm9kdWN0aW9uUmVkdWNlcihzdGF0ZSwgYWN0aW9uKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNdWx0aWxpbmd1YWxTdGF0ZShzdGF0ZSQ6IE9ic2VydmFibGU8SUFwcFN0YXRlPik6IE9ic2VydmFibGU8ZnJvbU11bHRpbGluZ3VhbC5JTXVsdGlsaW5ndWFsU3RhdGU+IHtcclxuICByZXR1cm4gc3RhdGUkLnNlbGVjdChzID0+IHMuaTE4bik7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWVMaXN0U3RhdGUoc3RhdGUkOiBPYnNlcnZhYmxlPElBcHBTdGF0ZT4pOiBPYnNlcnZhYmxlPGZyb21TYW1wbGUuSVNhbXBsZVN0YXRlPiB7XHJcbiAgcmV0dXJuIHN0YXRlJC5zZWxlY3QocyA9PiBzLnNhbXBsZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBnZXRMYW5nOiBhbnkgPSBjb21wb3NlKGZyb21NdWx0aWxpbmd1YWwuZ2V0TGFuZywgZ2V0TXVsdGlsaW5ndWFsU3RhdGUpO1xyXG5leHBvcnQgY29uc3QgZ2V0TmFtZXM6IGFueSA9IGNvbXBvc2UoZnJvbVNhbXBsZS5nZXROYW1lcywgZ2V0TmFtZUxpc3RTdGF0ZSk7XHJcbiJdfQ==