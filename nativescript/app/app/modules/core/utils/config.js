Object.defineProperty(exports, "__esModule", { value: true });
var Config = (function () {
    function Config() {
    }
    // convenient platform checks
    Config.IS_WEB = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;
    };
    Config.IS_MOBILE_NATIVE = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;
    };
    Config.IS_MOBILE_HYBRID = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;
    };
    Config.IS_DESKTOP = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;
    };
    Config.ENVIRONMENT = function () {
        try {
            return JSON.parse('<%= ENV_CONFIG %>');
        }
        catch (exp) {
            return {};
        }
    };
    // supported languages
    Config.GET_SUPPORTED_LANGUAGES = function () {
        return [
            { code: 'en', title: 'English' },
            { code: 'es', title: 'Spanish' },
            { code: 'fr', title: 'French' },
            { code: 'ru', title: 'Russian' },
            { code: 'bg', title: 'Bulgarian' }
        ];
    };
    Config.IS_DEBUG_MODE = function () {
        for (var key in Config.DEBUG) {
            if (Config.DEBUG[key]) {
                // if any level is on, debug mode is on
                return true;
            }
        }
        return false;
    };
    // reset debug defaults
    Config.RESET = function () {
        for (var key in Config.DEBUG) {
            Config.DEBUG[key] = false;
        }
    };
    return Config;
}());
Config.DEBUG = {
    LEVEL_1: false,
    LEVEL_2: false,
    LEVEL_3: false,
    LEVEL_4: false // .log + all the above
};
// supported platforms
Config.PLATFORMS = {
    WEB: 'web',
    MOBILE_NATIVE: 'mobile_native',
    MOBILE_HYBRID: 'mobile_hybrid',
    DESKTOP: 'desktop'
};
// current target (defaults to web)
Config.PLATFORM_TARGET = Config.PLATFORMS.WEB;
exports.Config = Config;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFjQTtJQUFBO0lBMkVBLENBQUM7SUFwREMsNkJBQTZCO0lBQ2YsYUFBTSxHQUFwQjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ3pELENBQUM7SUFFYSx1QkFBZ0IsR0FBOUI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztJQUNuRSxDQUFDO0lBRWEsdUJBQWdCLEdBQTlCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVhLGlCQUFVLEdBQXhCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDN0QsQ0FBQztJQUVhLGtCQUFXLEdBQXpCO1FBQ0UsSUFBSSxDQUFDO1lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDWixDQUFDO0lBQ0gsQ0FBQztJQUVELHNCQUFzQjtJQUNSLDhCQUF1QixHQUFyQztRQUNFLE1BQU0sQ0FBQztZQUNMLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO1lBQy9CLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO1NBQ25DLENBQUM7SUFDSixDQUFDO0lBRWEsb0JBQWEsR0FBM0I7UUFDRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM3QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsdUNBQXVDO2dCQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2QsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHVCQUF1QjtJQUNULFlBQUssR0FBbkI7UUFDRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBM0VEO0FBS2dCLFlBQUssR0FBRztJQUNwQixPQUFPLEVBQUUsS0FBSztJQUNkLE9BQU8sRUFBRSxLQUFLO0lBQ2QsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSyxDQUFFLHVCQUF1QjtDQUN4QyxDQUFDO0FBRUYsc0JBQXNCO0FBQ1IsZ0JBQVMsR0FBZTtJQUNwQyxHQUFHLEVBQUUsS0FBSztJQUNWLGFBQWEsRUFBRSxlQUFlO0lBQzlCLGFBQWEsRUFBRSxlQUFlO0lBQzlCLE9BQU8sRUFBRSxTQUFTO0NBQ25CLENBQUM7QUFFRixtQ0FBbUM7QUFDckIsc0JBQWUsR0FBVyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQXJCbEQsd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGZWVsIGZyZWUgdG8gZXh0ZW5kIHRoaXMgaW50ZXJmYWNlXHJcbi8vIGRlcGVuZGluZyBvbiB5b3VyIGFwcCBzcGVjaWZpYyBjb25maWcuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRW52Q29uZmlnIHtcclxuICBBUEk/OiBzdHJpbmc7XHJcbiAgRU5WPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElQbGF0Zm9ybXMge1xyXG4gIFdFQjogc3RyaW5nO1xyXG4gIE1PQklMRV9OQVRJVkU6IHN0cmluZztcclxuICBNT0JJTEVfSFlCUklEOiBzdHJpbmc7XHJcbiAgREVTS1RPUDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29uZmlnIHtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBQYWdlQ2xhc3M6IGFueTtcclxuXHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgREVCVUcgPSB7XHJcbiAgICBMRVZFTF8xOiBmYWxzZSwgLy8gLmluZm8gb25seVxyXG4gICAgTEVWRUxfMjogZmFsc2UsIC8vIC53YXJuIG9ubHlcclxuICAgIExFVkVMXzM6IGZhbHNlLCAvLyAuZXJyb3Igb25seVxyXG4gICAgTEVWRUxfNDogZmFsc2UgIC8vIC5sb2cgKyBhbGwgdGhlIGFib3ZlXHJcbiAgfTtcclxuXHJcbiAgLy8gc3VwcG9ydGVkIHBsYXRmb3Jtc1xyXG4gIHB1YmxpYyBzdGF0aWMgUExBVEZPUk1TOiBJUGxhdGZvcm1zID0ge1xyXG4gICAgV0VCOiAnd2ViJyxcclxuICAgIE1PQklMRV9OQVRJVkU6ICdtb2JpbGVfbmF0aXZlJyxcclxuICAgIE1PQklMRV9IWUJSSUQ6ICdtb2JpbGVfaHlicmlkJyxcclxuICAgIERFU0tUT1A6ICdkZXNrdG9wJ1xyXG4gIH07XHJcblxyXG4gIC8vIGN1cnJlbnQgdGFyZ2V0IChkZWZhdWx0cyB0byB3ZWIpXHJcbiAgcHVibGljIHN0YXRpYyBQTEFURk9STV9UQVJHRVQ6IHN0cmluZyA9IENvbmZpZy5QTEFURk9STVMuV0VCO1xyXG5cclxuICAvLyBjb252ZW5pZW50IHBsYXRmb3JtIGNoZWNrc1xyXG4gIHB1YmxpYyBzdGF0aWMgSVNfV0VCKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuV0VCO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBJU19NT0JJTEVfTkFUSVZFKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuTU9CSUxFX05BVElWRTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgSVNfTU9CSUxFX0hZQlJJRCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLk1PQklMRV9IWUJSSUQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIElTX0RFU0tUT1AoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5ERVNLVE9QO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBFTlZJUk9OTUVOVCgpOiBFbnZDb25maWcge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UoJzwlPSBFTlZfQ09ORklHICU+Jyk7XHJcbiAgICB9IGNhdGNoIChleHApIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gc3VwcG9ydGVkIGxhbmd1YWdlc1xyXG4gIHB1YmxpYyBzdGF0aWMgR0VUX1NVUFBPUlRFRF9MQU5HVUFHRVMoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7IGNvZGU6ICdlbicsIHRpdGxlOiAnRW5nbGlzaCcgfSxcclxuICAgICAgeyBjb2RlOiAnZXMnLCB0aXRsZTogJ1NwYW5pc2gnIH0sXHJcbiAgICAgIHsgY29kZTogJ2ZyJywgdGl0bGU6ICdGcmVuY2gnIH0sXHJcbiAgICAgIHsgY29kZTogJ3J1JywgdGl0bGU6ICdSdXNzaWFuJyB9LFxyXG4gICAgICB7IGNvZGU6ICdiZycsIHRpdGxlOiAnQnVsZ2FyaWFuJyB9XHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBJU19ERUJVR19NT0RFKCk6IGJvb2xlYW4ge1xyXG4gICAgZm9yIChsZXQga2V5IGluIENvbmZpZy5ERUJVRykge1xyXG4gICAgICBpZiAoQ29uZmlnLkRFQlVHW2tleV0pIHtcclxuICAgICAgICAvLyBpZiBhbnkgbGV2ZWwgaXMgb24sIGRlYnVnIG1vZGUgaXMgb25cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVzZXQgZGVidWcgZGVmYXVsdHNcclxuICBwdWJsaWMgc3RhdGljIFJFU0VUKCkge1xyXG4gICAgZm9yIChsZXQga2V5IGluIENvbmZpZy5ERUJVRykge1xyXG4gICAgICBDb25maWcuREVCVUdba2V5XSA9IGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=