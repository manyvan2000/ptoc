Object.defineProperty(exports, "__esModule", { value: true });
var Config = (function () {
    function Config() {
    }
    // convenient platform checks
    Config.IS_WEB = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;
    };
    Config.IS_MOBILE_NATIVE = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;
    };
    Config.IS_MOBILE_HYBRID = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;
    };
    Config.IS_DESKTOP = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;
    };
    Config.ENVIRONMENT = function () {
        try {
            return JSON.parse('<%= ENV_CONFIG %>');
        }
        catch (exp) {
            return {};
        }
    };
    // supported languages
    Config.GET_SUPPORTED_LANGUAGES = function () {
        return [
            { code: 'en', title: 'English' },
            { code: 'es', title: 'Spanish' },
            { code: 'fr', title: 'French' },
            { code: 'ru', title: 'Russian' },
            { code: 'bg', title: 'Bulgarian' }
        ];
    };
    Config.IS_DEBUG_MODE = function () {
        for (var key in Config.DEBUG) {
            if (Config.DEBUG[key]) {
                // if any level is on, debug mode is on
                return true;
            }
        }
        return false;
    };
    // reset debug defaults
    Config.RESET = function () {
        for (var key in Config.DEBUG) {
            Config.DEBUG[key] = false;
        }
    };
    return Config;
}());
Config.DEBUG = {
    LEVEL_1: false,
    LEVEL_2: false,
    LEVEL_3: false,
    LEVEL_4: false // .log + all the above
};
// supported platforms
Config.PLATFORMS = {
    WEB: 'web',
    MOBILE_NATIVE: 'mobile_native',
    MOBILE_HYBRID: 'mobile_hybrid',
    DESKTOP: 'desktop'
};
// current target (defaults to web)
Config.PLATFORM_TARGET = Config.PLATFORMS.WEB;
exports.Config = Config;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFjQTtJQUFBO0lBMkVBLENBQUM7SUFwREMsNkJBQTZCO0lBQ2YsYUFBTSxHQUFwQjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ3pELENBQUM7SUFFYSx1QkFBZ0IsR0FBOUI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztJQUNuRSxDQUFDO0lBRWEsdUJBQWdCLEdBQTlCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVhLGlCQUFVLEdBQXhCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDN0QsQ0FBQztJQUVhLGtCQUFXLEdBQXpCO1FBQ0UsSUFBSSxDQUFDO1lBQ0gsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUN6QyxDQUFDO1FBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNiLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDWixDQUFDO0lBQ0gsQ0FBQztJQUVELHNCQUFzQjtJQUNSLDhCQUF1QixHQUFyQztRQUNFLE1BQU0sQ0FBQztZQUNMLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFO1lBQy9CLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFO1lBQ2hDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO1NBQ25DLENBQUM7SUFDSixDQUFDO0lBRWEsb0JBQWEsR0FBM0I7UUFDRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM3QixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsdUNBQXVDO2dCQUN2QyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2QsQ0FBQztRQUNILENBQUM7UUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELHVCQUF1QjtJQUNULFlBQUssR0FBbkI7UUFDRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUM1QixDQUFDO0lBQ0gsQ0FBQztJQUNILGFBQUM7QUFBRCxDQUFDLEFBM0VEO0FBS2dCLFlBQUssR0FBRztJQUNwQixPQUFPLEVBQUUsS0FBSztJQUNkLE9BQU8sRUFBRSxLQUFLO0lBQ2QsT0FBTyxFQUFFLEtBQUs7SUFDZCxPQUFPLEVBQUUsS0FBSyxDQUFFLHVCQUF1QjtDQUN4QyxDQUFDO0FBRUYsc0JBQXNCO0FBQ1IsZ0JBQVMsR0FBZTtJQUNwQyxHQUFHLEVBQUUsS0FBSztJQUNWLGFBQWEsRUFBRSxlQUFlO0lBQzlCLGFBQWEsRUFBRSxlQUFlO0lBQzlCLE9BQU8sRUFBRSxTQUFTO0NBQ25CLENBQUM7QUFFRixtQ0FBbUM7QUFDckIsc0JBQWUsR0FBVyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQXJCbEQsd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvLyBGZWVsIGZyZWUgdG8gZXh0ZW5kIHRoaXMgaW50ZXJmYWNlXG4vLyBkZXBlbmRpbmcgb24geW91ciBhcHAgc3BlY2lmaWMgY29uZmlnLlxuZXhwb3J0IGludGVyZmFjZSBFbnZDb25maWcge1xuICBBUEk/OiBzdHJpbmc7XG4gIEVOVj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGxhdGZvcm1zIHtcbiAgV0VCOiBzdHJpbmc7XG4gIE1PQklMRV9OQVRJVkU6IHN0cmluZztcbiAgTU9CSUxFX0hZQlJJRDogc3RyaW5nO1xuICBERVNLVE9QOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBDb25maWcge1xuXG4gIHB1YmxpYyBzdGF0aWMgUGFnZUNsYXNzOiBhbnk7XG5cblxuICBwdWJsaWMgc3RhdGljIERFQlVHID0ge1xuICAgIExFVkVMXzE6IGZhbHNlLCAvLyAuaW5mbyBvbmx5XG4gICAgTEVWRUxfMjogZmFsc2UsIC8vIC53YXJuIG9ubHlcbiAgICBMRVZFTF8zOiBmYWxzZSwgLy8gLmVycm9yIG9ubHlcbiAgICBMRVZFTF80OiBmYWxzZSAgLy8gLmxvZyArIGFsbCB0aGUgYWJvdmVcbiAgfTtcblxuICAvLyBzdXBwb3J0ZWQgcGxhdGZvcm1zXG4gIHB1YmxpYyBzdGF0aWMgUExBVEZPUk1TOiBJUGxhdGZvcm1zID0ge1xuICAgIFdFQjogJ3dlYicsXG4gICAgTU9CSUxFX05BVElWRTogJ21vYmlsZV9uYXRpdmUnLFxuICAgIE1PQklMRV9IWUJSSUQ6ICdtb2JpbGVfaHlicmlkJyxcbiAgICBERVNLVE9QOiAnZGVza3RvcCdcbiAgfTtcblxuICAvLyBjdXJyZW50IHRhcmdldCAoZGVmYXVsdHMgdG8gd2ViKVxuICBwdWJsaWMgc3RhdGljIFBMQVRGT1JNX1RBUkdFVDogc3RyaW5nID0gQ29uZmlnLlBMQVRGT1JNUy5XRUI7XG5cbiAgLy8gY29udmVuaWVudCBwbGF0Zm9ybSBjaGVja3NcbiAgcHVibGljIHN0YXRpYyBJU19XRUIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuV0VCO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBJU19NT0JJTEVfTkFUSVZFKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLk1PQklMRV9OQVRJVkU7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIElTX01PQklMRV9IWUJSSUQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuTU9CSUxFX0hZQlJJRDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSVNfREVTS1RPUCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5ERVNLVE9QO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBFTlZJUk9OTUVOVCgpOiBFbnZDb25maWcge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSgnPCU9IEVOVl9DT05GSUcgJT4nKTtcbiAgICB9IGNhdGNoIChleHApIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gIH1cblxuICAvLyBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXG4gIHB1YmxpYyBzdGF0aWMgR0VUX1NVUFBPUlRFRF9MQU5HVUFHRVMoKSB7XG4gICAgcmV0dXJuIFtcbiAgICAgIHsgY29kZTogJ2VuJywgdGl0bGU6ICdFbmdsaXNoJyB9LFxuICAgICAgeyBjb2RlOiAnZXMnLCB0aXRsZTogJ1NwYW5pc2gnIH0sXG4gICAgICB7IGNvZGU6ICdmcicsIHRpdGxlOiAnRnJlbmNoJyB9LFxuICAgICAgeyBjb2RlOiAncnUnLCB0aXRsZTogJ1J1c3NpYW4nIH0sXG4gICAgICB7IGNvZGU6ICdiZycsIHRpdGxlOiAnQnVsZ2FyaWFuJyB9XG4gICAgXTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgSVNfREVCVUdfTU9ERSgpOiBib29sZWFuIHtcbiAgICBmb3IgKGxldCBrZXkgaW4gQ29uZmlnLkRFQlVHKSB7XG4gICAgICBpZiAoQ29uZmlnLkRFQlVHW2tleV0pIHtcbiAgICAgICAgLy8gaWYgYW55IGxldmVsIGlzIG9uLCBkZWJ1ZyBtb2RlIGlzIG9uXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyByZXNldCBkZWJ1ZyBkZWZhdWx0c1xuICBwdWJsaWMgc3RhdGljIFJFU0VUKCkge1xuICAgIGZvciAobGV0IGtleSBpbiBDb25maWcuREVCVUcpIHtcbiAgICAgIENvbmZpZy5ERUJVR1trZXldID0gZmFsc2U7XG4gICAgfVxuICB9XG59XG4iXX0=