"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Config = (function () {
    function Config() {
    }
    Config.IS_WEB = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.WEB;
    };
    Config.IS_MOBILE_NATIVE = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_NATIVE;
    };
    Config.IS_MOBILE_HYBRID = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.MOBILE_HYBRID;
    };
    Config.IS_DESKTOP = function () {
        return Config.PLATFORM_TARGET === Config.PLATFORMS.DESKTOP;
    };
    Config.ENVIRONMENT = function () {
        try {
            return JSON.parse('{"API":"https://demo.com","ENV":"DEV"}');
        }
        catch (exp) {
            return {};
        }
    };
    Config.GET_SUPPORTED_LANGUAGES = function () {
        return [
            { code: 'en', title: 'English' },
            { code: 'es', title: 'Spanish' },
            { code: 'fr', title: 'French' },
            { code: 'ru', title: 'Russian' },
            { code: 'bg', title: 'Bulgarian' }
        ];
    };
    Config.IS_DEBUG_MODE = function () {
        for (var key in Config.DEBUG) {
            if (Config.DEBUG[key]) {
                return true;
            }
        }
        return false;
    };
    Config.RESET = function () {
        for (var key in Config.DEBUG) {
            Config.DEBUG[key] = false;
        }
    };
    Config.DEBUG = {
        LEVEL_1: false,
        LEVEL_2: false,
        LEVEL_3: false,
        LEVEL_4: false
    };
    Config.PLATFORMS = {
        WEB: 'web',
        MOBILE_NATIVE: 'mobile_native',
        MOBILE_HYBRID: 'mobile_hybrid',
        DESKTOP: 'desktop'
    };
    Config.PLATFORM_TARGET = Config.PLATFORMS.WEB;
    return Config;
}());
exports.Config = Config;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2NvcmUvdXRpbHMvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBY0E7SUFBQTtJQTJFQSxDQUFDO0lBbkRlLGFBQU0sR0FBcEI7UUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsS0FBSyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUN6RCxDQUFDO0lBRWEsdUJBQWdCLEdBQTlCO1FBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVhLHVCQUFnQixHQUE5QjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0lBQ25FLENBQUM7SUFFYSxpQkFBVSxHQUF4QjtRQUNFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZUFBZSxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQzdELENBQUM7SUFFYSxrQkFBVyxHQUF6QjtRQUNFLElBQUksQ0FBQztZQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDekMsQ0FBQztRQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ1osQ0FBQztJQUNILENBQUM7SUFHYSw4QkFBdUIsR0FBckM7UUFDRSxNQUFNLENBQUM7WUFDTCxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRTtZQUMvQixFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtZQUNoQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRTtTQUNuQyxDQUFDO0lBQ0osQ0FBQztJQUVhLG9CQUFhLEdBQTNCO1FBQ0UsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0IsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDZCxDQUFDO1FBQ0gsQ0FBQztRQUNELE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFDZixDQUFDO0lBR2EsWUFBSyxHQUFuQjtRQUNFLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1FBQzVCLENBQUM7SUFDSCxDQUFDO0lBckVhLFlBQUssR0FBRztRQUNwQixPQUFPLEVBQUUsS0FBSztRQUNkLE9BQU8sRUFBRSxLQUFLO1FBQ2QsT0FBTyxFQUFFLEtBQUs7UUFDZCxPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7SUFHWSxnQkFBUyxHQUFlO1FBQ3BDLEdBQUcsRUFBRSxLQUFLO1FBQ1YsYUFBYSxFQUFFLGVBQWU7UUFDOUIsYUFBYSxFQUFFLGVBQWU7UUFDOUIsT0FBTyxFQUFFLFNBQVM7S0FDbkIsQ0FBQztJQUdZLHNCQUFlLEdBQVcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7SUFzRC9ELGFBQUM7Q0EzRUQsQUEyRUMsSUFBQTtBQTNFWSx3QkFBTSIsImZpbGUiOiJhcHAvbW9kdWxlcy9jb3JlL3V0aWxzL2NvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEZlZWwgZnJlZSB0byBleHRlbmQgdGhpcyBpbnRlcmZhY2VcclxuLy8gZGVwZW5kaW5nIG9uIHlvdXIgYXBwIHNwZWNpZmljIGNvbmZpZy5cclxuZXhwb3J0IGludGVyZmFjZSBFbnZDb25maWcge1xyXG4gIEFQST86IHN0cmluZztcclxuICBFTlY/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBsYXRmb3JtcyB7XHJcbiAgV0VCOiBzdHJpbmc7XHJcbiAgTU9CSUxFX05BVElWRTogc3RyaW5nO1xyXG4gIE1PQklMRV9IWUJSSUQ6IHN0cmluZztcclxuICBERVNLVE9QOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25maWcge1xyXG5cclxuICBwdWJsaWMgc3RhdGljIFBhZ2VDbGFzczogYW55O1xyXG5cclxuXHJcbiAgcHVibGljIHN0YXRpYyBERUJVRyA9IHtcclxuICAgIExFVkVMXzE6IGZhbHNlLCAvLyAuaW5mbyBvbmx5XHJcbiAgICBMRVZFTF8yOiBmYWxzZSwgLy8gLndhcm4gb25seVxyXG4gICAgTEVWRUxfMzogZmFsc2UsIC8vIC5lcnJvciBvbmx5XHJcbiAgICBMRVZFTF80OiBmYWxzZSAgLy8gLmxvZyArIGFsbCB0aGUgYWJvdmVcclxuICB9O1xyXG5cclxuICAvLyBzdXBwb3J0ZWQgcGxhdGZvcm1zXHJcbiAgcHVibGljIHN0YXRpYyBQTEFURk9STVM6IElQbGF0Zm9ybXMgPSB7XHJcbiAgICBXRUI6ICd3ZWInLFxyXG4gICAgTU9CSUxFX05BVElWRTogJ21vYmlsZV9uYXRpdmUnLFxyXG4gICAgTU9CSUxFX0hZQlJJRDogJ21vYmlsZV9oeWJyaWQnLFxyXG4gICAgREVTS1RPUDogJ2Rlc2t0b3AnXHJcbiAgfTtcclxuXHJcbiAgLy8gY3VycmVudCB0YXJnZXQgKGRlZmF1bHRzIHRvIHdlYilcclxuICBwdWJsaWMgc3RhdGljIFBMQVRGT1JNX1RBUkdFVDogc3RyaW5nID0gQ29uZmlnLlBMQVRGT1JNUy5XRUI7XHJcblxyXG4gIC8vIGNvbnZlbmllbnQgcGxhdGZvcm0gY2hlY2tzXHJcbiAgcHVibGljIHN0YXRpYyBJU19XRUIoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5XRUI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIElTX01PQklMRV9OQVRJVkUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gQ29uZmlnLlBMQVRGT1JNX1RBUkdFVCA9PT0gQ29uZmlnLlBMQVRGT1JNUy5NT0JJTEVfTkFUSVZFO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBJU19NT0JJTEVfSFlCUklEKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIENvbmZpZy5QTEFURk9STV9UQVJHRVQgPT09IENvbmZpZy5QTEFURk9STVMuTU9CSUxFX0hZQlJJRDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgSVNfREVTS1RPUCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBDb25maWcuUExBVEZPUk1fVEFSR0VUID09PSBDb25maWcuUExBVEZPUk1TLkRFU0tUT1A7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIEVOVklST05NRU5UKCk6IEVudkNvbmZpZyB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4gSlNPTi5wYXJzZSgnPCU9IEVOVl9DT05GSUcgJT4nKTtcclxuICAgIH0gY2F0Y2ggKGV4cCkge1xyXG4gICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBzdXBwb3J0ZWQgbGFuZ3VhZ2VzXHJcbiAgcHVibGljIHN0YXRpYyBHRVRfU1VQUE9SVEVEX0xBTkdVQUdFUygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHsgY29kZTogJ2VuJywgdGl0bGU6ICdFbmdsaXNoJyB9LFxyXG4gICAgICB7IGNvZGU6ICdlcycsIHRpdGxlOiAnU3BhbmlzaCcgfSxcclxuICAgICAgeyBjb2RlOiAnZnInLCB0aXRsZTogJ0ZyZW5jaCcgfSxcclxuICAgICAgeyBjb2RlOiAncnUnLCB0aXRsZTogJ1J1c3NpYW4nIH0sXHJcbiAgICAgIHsgY29kZTogJ2JnJywgdGl0bGU6ICdCdWxnYXJpYW4nIH1cclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIElTX0RFQlVHX01PREUoKTogYm9vbGVhbiB7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gQ29uZmlnLkRFQlVHKSB7XHJcbiAgICAgIGlmIChDb25maWcuREVCVUdba2V5XSkge1xyXG4gICAgICAgIC8vIGlmIGFueSBsZXZlbCBpcyBvbiwgZGVidWcgbW9kZSBpcyBvblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICAvLyByZXNldCBkZWJ1ZyBkZWZhdWx0c1xyXG4gIHB1YmxpYyBzdGF0aWMgUkVTRVQoKSB7XHJcbiAgICBmb3IgKGxldCBrZXkgaW4gQ29uZmlnLkRFQlVHKSB7XHJcbiAgICAgIENvbmZpZy5ERUJVR1trZXldID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==
