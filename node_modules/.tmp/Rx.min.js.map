{"version":3,"sources":["../rxjs/src/observable/BoundCallbackObservable.ts","../rxjs/src/observable/bindCallback.ts","../rxjs/src/add/observable/bindCallback.ts","../rxjs/src/observable/BoundNodeCallbackObservable.ts","../rxjs/src/observable/bindNodeCallback.ts","../rxjs/src/add/observable/bindNodeCallback.ts","../rxjs/src/observable/combineLatest.ts","../rxjs/src/add/observable/combineLatest.ts","../rxjs/src/observable/concat.ts","../rxjs/src/add/observable/concat.ts","../rxjs/src/observable/DeferObservable.ts","../rxjs/src/observable/defer.ts","../rxjs/src/add/observable/defer.ts","../rxjs/src/observable/empty.ts","../rxjs/src/add/observable/empty.ts","../rxjs/src/observable/ForkJoinObservable.ts","../rxjs/src/observable/forkJoin.ts","../rxjs/src/add/observable/forkJoin.ts","../rxjs/src/observable/from.ts","../rxjs/src/add/observable/from.ts","../rxjs/src/observable/FromEventObservable.ts","../rxjs/src/observable/fromEvent.ts","../rxjs/src/add/observable/fromEvent.ts","../rxjs/src/observable/FromEventPatternObservable.ts","../rxjs/src/observable/fromEventPattern.ts","../rxjs/src/add/observable/fromEventPattern.ts","../rxjs/src/observable/fromPromise.ts","../rxjs/src/add/observable/fromPromise.ts","../rxjs/src/observable/GenerateObservable.ts","../rxjs/src/add/observable/generate.ts","../rxjs/src/observable/IfObservable.ts","../rxjs/src/observable/if.ts","../rxjs/src/add/observable/if.ts","../rxjs/src/observable/IntervalObservable.ts","../rxjs/src/observable/interval.ts","../rxjs/src/add/observable/interval.ts","../rxjs/src/observable/merge.ts","../rxjs/src/add/observable/merge.ts","../rxjs/src/add/observable/race.ts","../rxjs/src/observable/NeverObservable.ts","../rxjs/src/observable/never.ts","../rxjs/src/add/observable/never.ts","../rxjs/src/observable/of.ts","../rxjs/src/add/observable/of.ts","../rxjs/src/add/observable/onErrorResumeNext.ts","../rxjs/src/observable/PairsObservable.ts","../rxjs/src/observable/pairs.ts","../rxjs/src/add/observable/pairs.ts","../rxjs/src/observable/RangeObservable.ts","../rxjs/src/observable/range.ts","../rxjs/src/add/observable/range.ts","../rxjs/src/observable/UsingObservable.ts","../rxjs/src/observable/using.ts","../rxjs/src/add/observable/using.ts","../rxjs/src/observable/ErrorObservable.ts","../rxjs/src/observable/throw.ts","../rxjs/src/add/observable/throw.ts","../rxjs/src/observable/TimerObservable.ts","../rxjs/src/observable/timer.ts","../rxjs/src/add/observable/timer.ts","../rxjs/src/observable/zip.ts","../rxjs/src/add/observable/zip.ts","../rxjs/src/observable/dom/ajax.ts","../rxjs/src/add/observable/dom/ajax.ts","../rxjs/src/util/assign.ts","../rxjs/src/observable/dom/WebSocketSubject.ts","../rxjs/src/observable/dom/webSocket.ts","../rxjs/src/add/observable/dom/webSocket.ts","../rxjs/src/operator/buffer.ts","../rxjs/src/add/operator/buffer.ts","../rxjs/src/operator/bufferCount.ts","../rxjs/src/add/operator/bufferCount.ts","../rxjs/src/operator/bufferTime.ts","../rxjs/src/add/operator/bufferTime.ts","../rxjs/src/operator/bufferToggle.ts","../rxjs/src/add/operator/bufferToggle.ts","../rxjs/src/operator/bufferWhen.ts","../rxjs/src/add/operator/bufferWhen.ts","../rxjs/src/operator/catch.ts","../rxjs/src/add/operator/catch.ts","../rxjs/src/operator/combineAll.ts","../rxjs/src/add/operator/combineAll.ts","../rxjs/src/operator/combineLatest.ts","../rxjs/src/add/operator/combineLatest.ts","../rxjs/src/add/operator/concat.ts","../rxjs/src/operator/concatAll.ts","../rxjs/src/add/operator/concatAll.ts","../rxjs/src/operator/concatMap.ts","../rxjs/src/add/operator/concatMap.ts","../rxjs/src/operator/concatMapTo.ts","../rxjs/src/add/operator/concatMapTo.ts","../rxjs/src/operator/count.ts","../rxjs/src/add/operator/count.ts","../rxjs/src/operator/dematerialize.ts","../rxjs/src/add/operator/dematerialize.ts","../rxjs/src/operator/debounce.ts","../rxjs/src/add/operator/debounce.ts","../rxjs/src/operator/debounceTime.ts","../rxjs/src/add/operator/debounceTime.ts","../rxjs/src/operator/defaultIfEmpty.ts","../rxjs/src/add/operator/defaultIfEmpty.ts","../rxjs/src/operator/delay.ts","../rxjs/src/add/operator/delay.ts","../rxjs/src/operator/delayWhen.ts","../rxjs/src/add/operator/delayWhen.ts","../rxjs/src/util/Set.ts","../rxjs/src/operator/distinct.ts","../rxjs/src/add/operator/distinct.ts","../rxjs/src/add/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilChanged.ts","../rxjs/src/operator/distinctUntilKeyChanged.ts","../rxjs/src/add/operator/distinctUntilKeyChanged.ts","../rxjs/src/operator/do.ts","../rxjs/src/add/operator/do.ts","../rxjs/src/operator/exhaust.ts","../rxjs/src/add/operator/exhaust.ts","../rxjs/src/operator/exhaustMap.ts","../rxjs/src/add/operator/exhaustMap.ts","../rxjs/src/operator/expand.ts","../rxjs/src/add/operator/expand.ts","../rxjs/src/operator/elementAt.ts","../rxjs/src/add/operator/elementAt.ts","../rxjs/src/add/operator/filter.ts","../rxjs/src/operator/finally.ts","../rxjs/src/add/operator/finally.ts","../rxjs/src/add/operator/find.ts","../rxjs/src/operator/find.ts","../rxjs/src/operator/findIndex.ts","../rxjs/src/add/operator/findIndex.ts","../rxjs/src/operator/first.ts","../rxjs/src/add/operator/first.ts","../rxjs/src/util/MapPolyfill.ts","../rxjs/src/util/Map.ts","../rxjs/src/util/FastMap.ts","../rxjs/src/operator/groupBy.ts","../rxjs/src/add/operator/groupBy.ts","../rxjs/src/util/noop.ts","../rxjs/src/operator/ignoreElements.ts","../rxjs/src/add/operator/ignoreElements.ts","../rxjs/src/operator/isEmpty.ts","../rxjs/src/add/operator/isEmpty.ts","../rxjs/src/operator/audit.ts","../rxjs/src/add/operator/audit.ts","../rxjs/src/operator/auditTime.ts","../rxjs/src/add/operator/auditTime.ts","../rxjs/src/operator/last.ts","../rxjs/src/add/operator/last.ts","../rxjs/src/operator/let.ts","../rxjs/src/add/operator/let.ts","../rxjs/src/operator/every.ts","../rxjs/src/add/operator/every.ts","../rxjs/src/add/operator/map.ts","../rxjs/src/operator/mapTo.ts","../rxjs/src/add/operator/mapTo.ts","../rxjs/src/operator/materialize.ts","../rxjs/src/add/operator/materialize.ts","../rxjs/src/operator/max.ts","../rxjs/src/add/operator/max.ts","../rxjs/src/operator/merge.ts","../rxjs/src/add/operator/merge.ts","../rxjs/src/add/operator/mergeAll.ts","../rxjs/src/operator/mergeMap.ts","../rxjs/src/add/operator/mergeMap.ts","../rxjs/src/operator/mergeMapTo.ts","../rxjs/src/add/operator/mergeMapTo.ts","../rxjs/src/operator/mergeScan.ts","../rxjs/src/add/operator/mergeScan.ts","../rxjs/src/operator/min.ts","../rxjs/src/add/operator/min.ts","../rxjs/src/add/operator/multicast.ts","../rxjs/src/add/operator/observeOn.ts","../rxjs/src/observable/PromiseObservable.ts","../rxjs/src/observable/IteratorObservable.ts","../rxjs/src/observable/ArrayLikeObservable.ts","../rxjs/src/observable/FromObservable.ts","../rxjs/src/operator/onErrorResumeNext.ts","../rxjs/src/add/operator/onErrorResumeNext.ts","../rxjs/src/operator/pairwise.ts","../rxjs/src/add/operator/pairwise.ts","../rxjs/src/util/not.ts","../rxjs/src/operator/filter.ts","../rxjs/src/operator/partition.ts","../rxjs/src/add/operator/partition.ts","../rxjs/src/operator/pluck.ts","../rxjs/src/add/operator/pluck.ts","../rxjs/src/operator/publish.ts","../rxjs/src/add/operator/publish.ts","../rxjs/src/operator/publishBehavior.ts","../rxjs/src/add/operator/publishBehavior.ts","../rxjs/src/operator/publishReplay.ts","../rxjs/src/add/operator/publishReplay.ts","../rxjs/src/operator/publishLast.ts","../rxjs/src/add/operator/publishLast.ts","../rxjs/src/operator/race.ts","../rxjs/src/add/operator/race.ts","../rxjs/src/operator/reduce.ts","../rxjs/src/add/operator/reduce.ts","../rxjs/src/operator/repeat.ts","../rxjs/src/add/operator/repeat.ts","../rxjs/src/operator/repeatWhen.ts","../rxjs/src/add/operator/repeatWhen.ts","../rxjs/src/operator/retry.ts","../rxjs/src/add/operator/retry.ts","../rxjs/src/operator/retryWhen.ts","../rxjs/src/add/operator/retryWhen.ts","../rxjs/src/operator/sample.ts","../rxjs/src/add/operator/sample.ts","../rxjs/src/operator/sampleTime.ts","../rxjs/src/add/operator/sampleTime.ts","../rxjs/src/operator/scan.ts","../rxjs/src/add/operator/scan.ts","../rxjs/src/operator/sequenceEqual.ts","../rxjs/src/add/operator/sequenceEqual.ts","../rxjs/src/operator/multicast.ts","../rxjs/src/operator/share.ts","../rxjs/src/add/operator/share.ts","../rxjs/src/operator/single.ts","../rxjs/src/add/operator/single.ts","../rxjs/src/operator/skip.ts","../rxjs/src/add/operator/skip.ts","../rxjs/src/operator/skipUntil.ts","../rxjs/src/add/operator/skipUntil.ts","../rxjs/src/operator/skipWhile.ts","../rxjs/src/add/operator/skipWhile.ts","../rxjs/src/operator/mergeAll.ts","../rxjs/src/operator/concat.ts","../rxjs/src/operator/startWith.ts","../rxjs/src/add/operator/startWith.ts","../rxjs/src/observable/SubscribeOnObservable.ts","../rxjs/src/operator/subscribeOn.ts","../rxjs/src/add/operator/subscribeOn.ts","../rxjs/src/operator/switch.ts","../rxjs/src/add/operator/switch.ts","../rxjs/src/operator/switchMap.ts","../rxjs/src/add/operator/switchMap.ts","../rxjs/src/operator/switchMapTo.ts","../rxjs/src/add/operator/switchMapTo.ts","../rxjs/src/operator/take.ts","../rxjs/src/add/operator/take.ts","../rxjs/src/operator/takeLast.ts","../rxjs/src/add/operator/takeLast.ts","../rxjs/src/operator/takeUntil.ts","../rxjs/src/add/operator/takeUntil.ts","../rxjs/src/operator/takeWhile.ts","../rxjs/src/add/operator/takeWhile.ts","../rxjs/src/operator/throttle.ts","../rxjs/src/add/operator/throttle.ts","../rxjs/src/operator/throttleTime.ts","../rxjs/src/add/operator/throttleTime.ts","../rxjs/src/add/operator/timeInterval.ts","../rxjs/src/operator/timeout.ts","../rxjs/src/add/operator/timeout.ts","../rxjs/src/util/isDate.ts","../rxjs/src/operator/timeoutWith.ts","../rxjs/src/add/operator/timeoutWith.ts","../rxjs/src/add/operator/timestamp.ts","../rxjs/src/operator/toArray.ts","../rxjs/src/add/operator/toArray.ts","../rxjs/src/operator/toPromise.ts","../rxjs/src/add/operator/toPromise.ts","../rxjs/src/operator/window.ts","../rxjs/src/add/operator/window.ts","../rxjs/src/operator/windowCount.ts","../rxjs/src/add/operator/windowCount.ts","../rxjs/src/util/isNumeric.ts","../rxjs/src/operator/windowTime.ts","../rxjs/src/add/operator/windowTime.ts","../rxjs/src/operator/windowToggle.ts","../rxjs/src/add/operator/windowToggle.ts","../rxjs/src/operator/windowWhen.ts","../rxjs/src/add/operator/windowWhen.ts","../rxjs/src/operator/withLatestFrom.ts","../rxjs/src/add/operator/withLatestFrom.ts","../rxjs/src/add/operator/zip.ts","../rxjs/src/observable/ScalarObservable.ts","../rxjs/src/observable/EmptyObservable.ts","../rxjs/src/util/isScheduler.ts","../rxjs/src/observable/ArrayObservable.ts","../rxjs/src/OuterSubscriber.ts","../rxjs/src/util/isArrayLike.ts","../rxjs/src/util/isPromise.ts","../rxjs/src/InnerSubscriber.ts","../rxjs/src/util/subscribeToResult.ts","../rxjs/src/operator/zip.ts","../rxjs/src/operator/zipAll.ts","../rxjs/src/add/operator/zipAll.ts","../rxjs/src/AsyncSubject.ts","../rxjs/src/operator/observeOn.ts","../rxjs/src/ReplaySubject.ts","../rxjs/src/BehaviorSubject.ts","../rxjs/src/observable/ConnectableObservable.ts","../rxjs/src/util/EmptyError.ts","../rxjs/src/util/ArgumentOutOfRangeError.ts","../rxjs/src/util/TimeoutError.ts","../rxjs/src/operator/timeInterval.ts","../rxjs/src/operator/timestamp.ts","../rxjs/src/Notification.ts","../rxjs/src/testing/ColdObservable.ts","../rxjs/src/util/ObjectUnsubscribedError.ts","../rxjs/src/SubjectSubscription.ts","../rxjs/src/Subject.ts","../rxjs/src/testing/SubscriptionLoggable.ts","../rxjs/src/util/applyMixins.ts","../rxjs/src/testing/HotObservable.ts","../rxjs/src/testing/SubscriptionLog.ts","../rxjs/src/testing/TestScheduler.ts","../rxjs/src/scheduler/VirtualTimeScheduler.ts","../rxjs/src/util/toSubscriber.ts","../rxjs/src/Observable.ts","../rxjs/src/Observer.ts","../rxjs/src/Subscriber.ts","../rxjs/src/operator/map.ts","../rxjs/src/observable/dom/AjaxObservable.ts","../rxjs/src/util/Immediate.ts","../rxjs/src/scheduler/AsapAction.ts","../rxjs/src/scheduler/AsapScheduler.ts","../rxjs/src/scheduler/asap.ts","../rxjs/src/scheduler/async.ts","../rxjs/src/scheduler/QueueAction.ts","../rxjs/src/scheduler/QueueScheduler.ts","../rxjs/src/scheduler/queue.ts","../rxjs/src/util/isArray.ts","../rxjs/src/util/isObject.ts","../rxjs/src/util/isFunction.ts","../rxjs/src/util/tryCatch.ts","../rxjs/src/util/errorObject.ts","../rxjs/src/util/UnsubscriptionError.ts","../rxjs/src/Subscription.ts","../rxjs/src/scheduler/Action.ts","../rxjs/src/scheduler/AsyncAction.ts","../rxjs/src/util/AnimationFrame.ts","../rxjs/src/scheduler/AnimationFrameAction.ts","../rxjs/src/Scheduler.ts","../rxjs/src/scheduler/AsyncScheduler.ts","../rxjs/src/scheduler/AnimationFrameScheduler.ts","../rxjs/src/scheduler/animationFrame.ts","../rxjs/src/symbol/rxSubscriber.ts","../rxjs/src/symbol/iterator.ts","../rxjs/src/util/root.ts","../rxjs/src/symbol/observable.ts","../rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","result","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","binaryType","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","err2","_unsubscribeAndRecycle","catch_1","catch","combineAll","combineAll_1","slice","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","accumulator","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isArrayLike_1","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","$$observable","isPromise","isArrayLike","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","val","parseFloat","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","numberOfNextedValues","window_2","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","thrownError","EMPTY","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","$$rxSubscriber","copy","_trySubscribe","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","_parents","_parentSubscriber","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","_subscriptions","hasErrors","trial","sub","teardown","_addParent","tmp","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","symbolIteratorPonyfill","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments, it will return an Observable. If `func` function\n   * calls its callback with one argument, the Observable will emit that value.\n   * If on the other hand callback is called with multiple values, resulting\n   * Observable will emit an array with these arguments.\n   *\n   * It is very important to remember, that input function `func` is not called\n   * when output function is, but rather when Observable returned by output\n   * function is subscribed. This means if `func` makes AJAX request, that request\n   * will be made every time someone subscribes to resulting Observable, but not before.\n   *\n   * Optionally, selector function can be passed to `bindObservable`. That function\n   * takes the same arguments as callback, and returns value\n   * that will be emitted by Observable instead of callback parameters themselves.\n   * Even though by default multiple arguments passed to callback appear in the stream as array,\n   * selector function will be called with arguments directly, just as callback would.\n   * This means you can imagine default selector (when one is not provided explicitly)\n   * as function that aggregates all its arguments into array, or simply returns first argument,\n   * if there is only one.\n   *\n   * Last optional parameter - {@link Scheduler} - can be used to control when call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default subscription to Observable calls `func`\n   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n   * and call `subscribe` on output Observable, all function calls that are currently executing,\n   * will end before `func` is invoked.\n   *\n   * When it comes to emitting results passed to callback, by default they are emitted\n   * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n   * then subscription to resulting Observable will call `next` function synchronously as well.\n   * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that Observable created by output function will always emit only one value\n   * and then complete right after. Even if `func` calls callback multiple times, values from\n   * second and following calls will never appear in the stream. If you need to\n   * listen for multiple calls, you probably want to use {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that output function has at call time. In particular, if `func`\n   * is called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions without any difference and error parameter\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive array of arguments passed to callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction.subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction.subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let subject = Observable.webSocket('ws://localhost:8081');\n   * subject.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   * subject.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket = new WebSocketSubject({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * let subject = Observable.webSocket('ws://localhost:8081');\n   * subject.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   * subject.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = this.count++;\n    const { destination, bufferSize, startBufferEvery, buffers } = this;\n    const startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;\n\n    if (count % startOn === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: IScheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index?: number) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private acc: T | R;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T, index?: number) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n\n    if (!this.hasSeed) {\n      this.index++;\n    }\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value, this.index++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return this.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscribable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  let scheduler: IScheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  let scheduler = <IScheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param {number} due\n * @param {Scheduler} [scheduler]\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout(): void {\n    this.error(this.errorInstance);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts an Observable sequence to a ES2015 compliant promise.\n *\n * @example\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .just(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Rejected Promise\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .throw(new Error('woops'))\n *   .toPromise();\n *\n * source\n *   .then((value) => console.log('Value: %s', value))\n *   .catch((err) => console.log('Error: %s', err));\n * // => Error: Error: woops\n *\n * // Setting via the config\n * Rx.config.Promise = RSVP.Promise;\n *\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Setting via the method\n * let source = Rx.Observable\n *   .just(42)\n *   .toPromise(RSVP.Promise);\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * @param PromiseCtor promise The constructor of the promise. If not provided,\n * it will look for a constructor first in Rx.config.Promise then fall back to\n * the native Promise constructor if available.\n * @return {Promise<T>} An ES2015 compatible promise with the last value from\n * the observable sequence.\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: IScheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const $$iterator = symbolIteratorPonyfill(root);","declare let global: NodeJS.Global;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport const root: any = (\n     typeof window == 'object' && window.window === window && window\n  || typeof self == 'object' && self.self === self && self\n  || typeof global == 'object' && global.global === global && global\n);\n\nif (!root) {\n  throw new Error('RxJS could not find any global context (window, self, global)');\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}